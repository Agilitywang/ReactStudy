{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","data","id","content","complete","task","handleClick","newData","map","v","setState","handleDelete","e","stopPropagation","filter","handleChange","target","value","handleAdd","push","Date","now","alert","num","this","length","confirm","className","style","textAlign","key","onClick","float","color","fontSize","height","lineHeight","marginBottom","fontWeight","name","placeholder","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NA2FeA,G,kNAtFbC,MAAQ,CACNC,KAAM,CACJ,CAAEC,GAAI,EAAGC,QAAS,eAAMC,UAAU,GAClC,CAAEF,GAAI,EAAGC,QAAS,eAAMC,UAAU,GAClC,CAAEF,GAAI,EAAGC,QAAS,eAAMC,UAAU,IAEpCC,KAAM,I,EAGRC,YAAc,SAACJ,GACb,IAAIK,EAAU,EAAKP,MAAMC,KAAKO,KAAI,SAACC,GACjC,OAAIA,EAAEP,KAAOA,GACXO,EAAEL,UAAYK,EAAEL,SACTK,GAEFA,KAET,EAAKC,SAAS,CACZT,KAAMM,K,EAIVI,aAAe,SAACC,EAAGV,GACjBU,EAAEC,kBACF,IAAIN,EAAU,EAAKP,MAAMC,KAAKa,QAAO,SAACL,GAAD,OAAOA,EAAEP,KAAOA,KACrD,EAAKQ,SAAS,CACZT,KAAMM,K,EAIVQ,aAAe,SAACH,GACd,EAAKF,SAAS,CACZL,KAAMO,EAAEI,OAAOC,S,EAInBC,UAAY,WACV,IAAIX,EAAU,EAAKP,MAAMC,KACpB,EAAKD,MAAMK,MAIhBE,EAAQY,KAAK,CAAEjB,GAAIkB,KAAKC,MAAOlB,QAAS,EAAKH,MAAMK,KAAMD,UAAU,IACnE,EAAKM,SAAS,CACZT,KAAMM,EACNF,KAAM,MANJiB,MAAM,+C,uDASF,IAAD,OACHC,EAAMC,KAAKxB,MAAMC,KAAKwB,OACtBC,EAAUF,KAAKxB,MAAMC,KAAKa,QAAO,SAACL,GAAD,OAAsB,IAAfA,EAAEL,YAAmBqB,OACjE,OACE,yBAAKE,UAAU,OACb,wBAAIC,MAAO,CAAEC,UAAW,WAAxB,cACA,yBAAKF,UAAU,QAEXH,KAAKxB,MAAMC,KAAKO,KAAI,SAACS,GACnB,OAAQ,yBACNa,IAAKb,EAAMf,GACXyB,UAAWV,EAAMb,SAAW,QAAU,UACtC2B,QAAS,kBAAM,EAAKzB,YAAYW,EAAMf,MACtCe,EAAMd,QACN,0BACEyB,MAAO,CAAEI,MAAO,QAASC,MAAO,OAAQC,SAAU,QAClDH,QAAS,SAACnB,GAAD,OAAO,EAAKD,aAAaC,EAAGK,EAAMf,MAF7C,oBAON,yBAAKyB,UAAU,OAAOD,EAAtB,sBAAmCH,EAAnC,iBAEF,yBAAKK,MAAO,CAAEO,OAAQ,OAAQC,WAAY,OAAQC,aAAa,SAC7D,0BAAMT,MAAO,CAAEU,WAAY,MAA3B,QACA,2BACEC,KAAK,OACLZ,UAAU,QACVa,YAAY,uCACZvB,MAAOO,KAAKxB,MAAMK,KAClBoC,SAAU,SAAC7B,GAAD,OAAO,EAAKG,aAAaH,OAEvC,4BAAQe,UAAU,OAAOI,QAASP,KAAKN,WAAvC,qB,GAlFUwB,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f8d63c2b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    data: [\r\n      { id: 1, content: '吃饭', complete: false, },\r\n      { id: 2, content: '睡觉', complete: false, },\r\n      { id: 3, content: '学习', complete: true, },\r\n    ],\r\n    task: ''\r\n  }\r\n\r\n  handleClick = (id) => {\r\n    let newData = this.state.data.map((v) => {\r\n      if (v.id === id) {\r\n        v.complete = !v.complete\r\n        return v\r\n      }\r\n      return v\r\n    })\r\n    this.setState({\r\n      data: newData\r\n    })\r\n  }\r\n\r\n  handleDelete = (e, id) => {\r\n    e.stopPropagation();\r\n    let newData = this.state.data.filter((v) => v.id !== id)\r\n    this.setState({\r\n      data: newData\r\n    })\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      task: e.target.value\r\n    })\r\n  }\r\n\r\n  handleAdd = () => {\r\n    let newData = this.state.data;\r\n    if (!this.state.task) {\r\n        alert('请输入任务内容')\r\n        return\r\n    }\r\n    newData.push({ id: Date.now(), content: this.state.task, complete: false })\r\n    this.setState({\r\n      data: newData,\r\n      task: ''\r\n    })\r\n  }\r\n  render() {\r\n    let num = this.state.data.length;\r\n    let confirm = this.state.data.filter((v) => v.complete === true).length;\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 style={{ textAlign: 'center' }}>TO DO LIST</h1>\r\n        <div className=\"list\">\r\n          {\r\n            this.state.data.map((value) => {\r\n              return (<div\r\n                key={value.id}\r\n                className={value.complete ? 'click' : 'unClick'}\r\n                onClick={() => this.handleClick(value.id)}\r\n              >{value.content}\r\n                <span\r\n                  style={{ float: 'right', color: 'gray', fontSize: '10px' }}\r\n                  onClick={(e) => this.handleDelete(e, value.id)}\r\n                >删除</span>\r\n              </div>)\r\n            })\r\n          }\r\n          <div className='num'>{confirm}已完成/{num}总数</div>\r\n        </div>\r\n        <div style={{ height: '36px', lineHeight: '36px' ,marginBottom:'20px'}}>\r\n          <span style={{ fontWeight: 700 }}>Task</span>\r\n          <input\r\n            name='task'\r\n            className='enter'\r\n            placeholder=\"添加您的任务\"\r\n            value={this.state.task}\r\n            onChange={(e) => this.handleChange(e)} />\r\n        </div>\r\n        <button className='save' onClick={this.handleAdd}>添加</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}